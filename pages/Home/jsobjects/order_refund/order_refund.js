"export default {\n\texecuteWorkflow: async (data, context) => {\n\t\tconst orderDetails = await get_order_details.run({orderId: data.orderId});\n\t\tconst userDetails = await get_user_details.run({userId: data.userId });\n\n\t\tif (this.isLowRisk(orderDetails, userDetails)) {\n\t\t\tawait initiate_refund.run();\n\t\t\tawait send_email.run({\n\t\t\t\tmessage: \"Refund approved\"  \n\t\t\t});\n\t\t} else {\n\t\t\tconst resolution = await appsmith.workflows.assignRequest({\n\t\t\t\t\"requestName\": \"Refund Order\",\n\t\t\t\t\"message\": `${userDetails.id} requested a refund for the order ${orderDetails.orderId}`,\n\t\t\t\t\"requestToGroups\": [\"L2 Agents\"],\n\t\t\t\t\"metadata\": {\"userId\": data.userId, \"orderDetails\": orderDetails},\n\t\t\t\t\"allowedResolutions\": [\"Approved\", \"Reject\"]\n\t\t\t})\n\t\t\tif (resolution == \"Approved\") {\n\t\t\t\tawait initiate_refund.run();\n\t\t\t\tawait send_email.run({\n\t\t\t\t\tmessage: \"Refund Approved\"\n\t\t\t\t})\n\t\t\t} else {\n\t\t\t\tawait send_email.run({\n\t\t\t\t\tmessage: \"Refund Rejected\"\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t},\n\n\tisLowRisk: (orderDetails, userDetails) => {\n\t\tif (orderDetails.value < 500 && userDetails.risk == \"Low\") {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n}\n\n"